#!/usr/bin/env python3
"""Simple verification script to test configurable entity device assignment fix."""

import sys
import os

# Add the custom_components path to sys.path so we can import the XCC modules
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'custom_components'))

def test_device_assignment_code():
    """Test that the device assignment code is correctly implemented."""
    print("üîç VERIFYING CONFIGURABLE ENTITY DEVICE ASSIGNMENT FIX")
    print("=" * 60)
    
    # Test 1: Check that all entity types use get_device_info_for_entity
    print("\nüìã Test 1: Checking device assignment method usage")
    
    try:
        # Import the entity modules
        from xcc import number, switch, select
        import inspect
        
        # Get source code for each entity type's __init__ method
        number_source = inspect.getsource(number.XCCNumber.__init__)
        switch_source = inspect.getsource(switch.XCCSwitch.__init__)
        select_source = inspect.getsource(select.XCCSelect.__init__)
        
        # Check that all use get_device_info_for_entity
        tests = [
            ("Number", number_source),
            ("Switch", switch_source), 
            ("Select", select_source)
        ]
        
        all_passed = True
        for entity_type, source in tests:
            if "get_device_info_for_entity" in source:
                print(f"   ‚úÖ {entity_type} entity uses get_device_info_for_entity")
            else:
                print(f"   ‚ùå {entity_type} entity does NOT use get_device_info_for_entity")
                all_passed = False
                
            # Check that they don't use hardcoded coordinator.device_info
            if "coordinator.device_info" in source.replace("get_device_info_for_entity", ""):
                print(f"   ‚ùå {entity_type} entity still uses hardcoded coordinator.device_info")
                all_passed = False
            else:
                print(f"   ‚úÖ {entity_type} entity does not use hardcoded device_info")
        
        if all_passed:
            print("\nüéâ All configurable entity types correctly use proper device assignment!")
        else:
            print("\n‚ùå Some entity types still have device assignment issues")
            return False
            
    except Exception as e:
        print(f"‚ùå Error importing modules: {e}")
        return False
    
    # Test 2: Check coordinator device assignment logic
    print("\nüìã Test 2: Checking coordinator device assignment logic")
    
    try:
        from xcc.coordinator import XCCDataUpdateCoordinator
        
        # Check that coordinator has the get_device_info_for_entity method
        if hasattr(XCCDataUpdateCoordinator, 'get_device_info_for_entity'):
            print("   ‚úÖ Coordinator has get_device_info_for_entity method")
            
            # Get the method source to verify it uses proper logic
            method_source = inspect.getsource(XCCDataUpdateCoordinator.get_device_info_for_entity)
            
            if "entity_data.get(\"device\")" in method_source:
                print("   ‚úÖ Method checks entity device assignment")
            else:
                print("   ‚ùå Method does not check entity device assignment")
                return False
                
            if "sub_device_info" in method_source:
                print("   ‚úÖ Method uses sub_device_info for device lookup")
            else:
                print("   ‚ùå Method does not use sub_device_info")
                return False
                
        else:
            print("   ‚ùå Coordinator missing get_device_info_for_entity method")
            return False
            
    except Exception as e:
        print(f"‚ùå Error checking coordinator: {e}")
        return False
    
    # Test 3: Check that sensors still work correctly (they use XCCEntity base class)
    print("\nüìã Test 3: Checking sensor entity device assignment")
    
    try:
        from xcc.entity import XCCEntity
        
        # Check that XCCEntity uses get_device_info_for_entity
        entity_source = inspect.getsource(XCCEntity.__init__)
        
        if "get_device_info_for_entity" in entity_source:
            print("   ‚úÖ XCCEntity (used by sensors) uses get_device_info_for_entity")
        else:
            print("   ‚ùå XCCEntity does not use get_device_info_for_entity")
            return False
            
    except Exception as e:
        print(f"‚ùå Error checking XCCEntity: {e}")
        return False
    
    print("\nüéâ ALL TESTS PASSED!")
    print("‚úÖ Configurable entities (number, switch, select) will now be assigned to correct devices")
    print("‚úÖ Device assignment is based on the page where the entity was found")
    print("‚úÖ Priority-based assignment ensures entities appear only once")
    print("‚úÖ Sensors continue to work correctly with proper device assignment")
    
    return True


def show_device_assignment_summary():
    """Show a summary of how device assignment works."""
    print("\nüìö DEVICE ASSIGNMENT SUMMARY")
    print("=" * 40)
    print("üèóÔ∏è How it works:")
    print("   1. Coordinator parses entities from XCC pages (FVE.XML, OKRUH1.XML, etc.)")
    print("   2. Each entity is assigned to a device based on its page:")
    print("      ‚Ä¢ FVE.XML ‚Üí FVE device (Photovoltaics)")
    print("      ‚Ä¢ OKRUH*.XML ‚Üí OKRUH device (Heating Circuit)")
    print("      ‚Ä¢ TUV1.XML ‚Üí TUV1 device (Hot Water)")
    print("      ‚Ä¢ SPOT.XML ‚Üí SPOT device (Spot Pricing)")
    print("      ‚Ä¢ BIV.XML ‚Üí BIV device (Auxiliary Source)")
    print("      ‚Ä¢ STAVJED.XML ‚Üí STAVJED device (System Status)")
    print("   3. Priority-based assignment prevents duplicates")
    print("   4. All entity types (sensors, numbers, switches, selects) use same assignment")
    print("\nüîß What was fixed:")
    print("   ‚Ä¢ Number entities: Now use get_device_info_for_entity() instead of hardcoded device")
    print("   ‚Ä¢ Switch entities: Now use get_device_info_for_entity() instead of hardcoded device") 
    print("   ‚Ä¢ Select entities: Now use get_device_info_for_entity() instead of hardcoded device")
    print("   ‚Ä¢ Sensor entities: Already worked correctly (use XCCEntity base class)")
    print("\nüéØ Result:")
    print("   ‚Ä¢ Configurable entities appear under the same device as related sensors")
    print("   ‚Ä¢ Better organization in Home Assistant device view")
    print("   ‚Ä¢ Consistent device assignment across all entity types")


if __name__ == "__main__":
    success = test_device_assignment_code()
    
    if success:
        show_device_assignment_summary()
        print("\nüöÄ Ready to test in Home Assistant!")
        sys.exit(0)
    else:
        print("\n‚ùå Fix verification failed - please check the implementation")
        sys.exit(1)
